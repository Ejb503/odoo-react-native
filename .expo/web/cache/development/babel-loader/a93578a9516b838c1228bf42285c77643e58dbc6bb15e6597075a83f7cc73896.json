{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Appbar, Button, Text, Chip, Divider } from 'react-native-paper';\nimport { useNavigation } from '@react-navigation/native';\nimport { useAppDispatch } from \"../hooks/useAppDispatch\";\nimport { useAppSelector } from \"../hooks/useAppSelector\";\nimport { logout } from \"../state/slices/authSlice\";\nimport { authService } from \"../api/authService\";\nimport { mcpService } from \"../api/mcpService\";\nimport VoiceInput from \"../components/VoiceInput\";\nimport MCPResponseRenderer from \"../components/MCPResponseRenderer\";\nimport { colors } from \"../utils/theme\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar EXAMPLE_QUERIES = ['Show me open sales orders', 'List inventory items low on stock', 'Generate sales report for this month', 'Show me a chart of monthly revenue'];\nvar MainScreen = function MainScreen() {\n  var navigation = useNavigation();\n  var dispatch = useAppDispatch();\n  var _useAppSelector = useAppSelector(function (state) {\n      return state.auth;\n    }),\n    token = _useAppSelector.token,\n    username = _useAppSelector.username,\n    serverUrl = _useAppSelector.serverUrl;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isProcessing = _useState2[0],\n    setIsProcessing = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    mcpResponse = _useState4[0],\n    setMcpResponse = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    previousQueries = _useState6[0],\n    setPreviousQueries = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isMCPConnected = _useState8[0],\n    setIsMCPConnected = _useState8[1];\n  useEffect(function () {\n    var connectToMCP = function () {\n      var _ref = _asyncToGenerator(function* () {\n        if (token && serverUrl) {\n          try {\n            var connected = yield mcpService.connect(serverUrl, token);\n            setIsMCPConnected(connected);\n          } catch (err) {\n            console.error('Failed to connect to MCP service', err);\n            Alert.alert('Connection Error', 'Failed to connect to MCP service');\n          }\n        }\n      });\n      return function connectToMCP() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    connectToMCP();\n    return function () {\n      mcpService.disconnect();\n    };\n  }, [token, serverUrl]);\n  var handleLogout = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        yield mcpService.disconnect();\n        yield authService.logout();\n        dispatch(logout());\n        navigation.replace('Login');\n      } catch (err) {\n        console.error('Logout error', err);\n      }\n    });\n    return function handleLogout() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handleSpeechResult = function () {\n    var _ref3 = _asyncToGenerator(function* (text) {\n      processQuery(text);\n    });\n    return function handleSpeechResult(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var generateMockResponse = function generateMockResponse() {\n    var mockQuery = \"Show me a sample response\";\n    processQuery(mockQuery);\n  };\n  var processQuery = function () {\n    var _ref4 = _asyncToGenerator(function* (query) {\n      setIsProcessing(true);\n      try {\n        var response = yield mcpService.processQuery(query);\n        setMcpResponse(response);\n        setPreviousQueries(function (prev) {\n          return [query].concat(_toConsumableArray(prev.slice(0, 4)));\n        });\n      } catch (err) {\n        console.error('Error processing query', err);\n        setMcpResponse({\n          type: 'error',\n          content: 'Failed to process your request'\n        });\n      } finally {\n        setIsProcessing(false);\n      }\n    });\n    return function processQuery(_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var handlePreviousQueryTap = function handlePreviousQueryTap(query) {\n    processQuery(query);\n  };\n  var handleExampleTap = function handleExampleTap(query) {\n    processQuery(query);\n  };\n  return _jsxs(SafeAreaView, {\n    style: styles.container,\n    children: [_jsxs(Appbar.Header, {\n      children: [_jsx(Appbar.Content, {\n        title: \"Odoo Voice Assistant\",\n        subtitle: username\n      }), _jsx(Appbar.Action, {\n        icon: \"logout\",\n        onPress: handleLogout\n      })]\n    }), _jsxs(ScrollView, {\n      contentContainerStyle: styles.scrollContainer,\n      children: [_jsxs(View, {\n        style: styles.connectionStatus,\n        children: [_jsx(Text, {\n          children: \"Connection Status: \"\n        }), _jsx(Chip, {\n          icon: isMCPConnected ? \"check-circle\" : \"close-circle\",\n          mode: \"outlined\",\n          style: [styles.statusChip, isMCPConnected ? styles.connected : styles.disconnected],\n          children: isMCPConnected ? 'Connected' : 'Disconnected'\n        })]\n      }), _jsx(MCPResponseRenderer, {\n        response: mcpResponse\n      }), _jsx(VoiceInput, {\n        onSpeechResult: handleSpeechResult,\n        isProcessing: isProcessing\n      }), _jsx(Button, {\n        mode: \"contained\",\n        style: styles.mockButton,\n        onPress: generateMockResponse,\n        children: \"Generate Mock Response\"\n      }), previousQueries.length > 0 && _jsxs(View, {\n        style: styles.historyContainer,\n        children: [_jsx(Text, {\n          style: styles.sectionTitle,\n          children: \"Recent Queries\"\n        }), _jsx(ScrollView, {\n          horizontal: true,\n          showsHorizontalScrollIndicator: false,\n          children: previousQueries.map(function (query, index) {\n            return _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                return handlePreviousQueryTap(query);\n              },\n              style: styles.historyItem,\n              children: _jsx(Text, {\n                style: styles.historyText,\n                numberOfLines: 1,\n                children: query\n              })\n            }, index);\n          })\n        })]\n      }), _jsx(Divider, {\n        style: styles.divider\n      }), _jsxs(View, {\n        style: styles.examplesContainer,\n        children: [_jsx(Text, {\n          style: styles.sectionTitle,\n          children: \"Try Asking\"\n        }), _jsx(View, {\n          style: styles.examplesGrid,\n          children: EXAMPLE_QUERIES.map(function (query, index) {\n            return _jsx(TouchableOpacity, {\n              style: styles.exampleItem,\n              onPress: function onPress() {\n                return handleExampleTap(query);\n              },\n              children: _jsx(Text, {\n                style: styles.exampleText,\n                children: query\n              })\n            }, index);\n          })\n        })]\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background\n  },\n  scrollContainer: {\n    padding: 16\n  },\n  connectionStatus: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 16\n  },\n  statusChip: {\n    marginLeft: 8\n  },\n  connected: {\n    backgroundColor: colors.success + '20'\n  },\n  disconnected: {\n    backgroundColor: colors.error + '20'\n  },\n  mockButton: {\n    marginTop: 10\n  },\n  historyContainer: {\n    marginTop: 20\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginBottom: 8,\n    color: colors.text\n  },\n  historyItem: {\n    backgroundColor: colors.surface,\n    padding: 8,\n    borderRadius: 16,\n    marginRight: 8,\n    marginBottom: 8,\n    maxWidth: 200\n  },\n  historyText: {\n    fontSize: 14\n  },\n  divider: {\n    marginVertical: 20\n  },\n  examplesContainer: {\n    marginBottom: 30\n  },\n  examplesGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap'\n  },\n  exampleItem: {\n    backgroundColor: colors.primary + '20',\n    padding: 12,\n    borderRadius: 8,\n    margin: 4,\n    maxWidth: '48%',\n    flexGrow: 1\n  },\n  exampleText: {\n    fontSize: 14,\n    color: colors.primary\n  }\n});\nexport default MainScreen;","map":{"version":3,"names":["React","useState","useEffect","StyleSheet","View","SafeAreaView","ScrollView","TouchableOpacity","Alert","Appbar","Button","Text","Chip","Divider","useNavigation","useAppDispatch","useAppSelector","logout","authService","mcpService","VoiceInput","MCPResponseRenderer","colors","jsx","_jsx","jsxs","_jsxs","EXAMPLE_QUERIES","MainScreen","navigation","dispatch","_useAppSelector","state","auth","token","username","serverUrl","_useState","_useState2","_slicedToArray","isProcessing","setIsProcessing","_useState3","_useState4","mcpResponse","setMcpResponse","_useState5","_useState6","previousQueries","setPreviousQueries","_useState7","_useState8","isMCPConnected","setIsMCPConnected","connectToMCP","_ref","_asyncToGenerator","connected","connect","err","console","error","alert","apply","arguments","disconnect","handleLogout","_ref2","replace","handleSpeechResult","_ref3","text","processQuery","_x","generateMockResponse","mockQuery","_ref4","query","response","prev","concat","_toConsumableArray","slice","type","content","_x2","handlePreviousQueryTap","handleExampleTap","style","styles","container","children","Header","Content","title","subtitle","Action","icon","onPress","contentContainerStyle","scrollContainer","connectionStatus","mode","statusChip","disconnected","onSpeechResult","mockButton","length","historyContainer","sectionTitle","horizontal","showsHorizontalScrollIndicator","map","index","historyItem","historyText","numberOfLines","divider","examplesContainer","examplesGrid","exampleItem","exampleText","create","flex","backgroundColor","background","padding","flexDirection","alignItems","marginBottom","marginLeft","success","marginTop","fontSize","fontWeight","color","surface","borderRadius","marginRight","maxWidth","marginVertical","flexWrap","primary","margin","flexGrow"],"sources":["/var/www/html/odoo-react-native/src/screens/MainScreen.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { StyleSheet, View, SafeAreaView, ScrollView, TouchableOpacity, Alert } from 'react-native';\nimport { Appbar, Button, Text, Chip, Divider } from 'react-native-paper';\nimport { useNavigation } from '@react-navigation/native';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\n\nimport { RootStackParamList } from '../App';\nimport { useAppDispatch } from '../hooks/useAppDispatch';\nimport { useAppSelector } from '../hooks/useAppSelector';\nimport { logout } from '../state/slices/authSlice';\nimport { authService } from '../api/authService';\nimport { mcpService, MCPResponse } from '../api/mcpService';\nimport VoiceInput from '../components/VoiceInput';\nimport MCPResponseRenderer from '../components/MCPResponseRenderer';\nimport { colors } from '../utils/theme';\n\ntype MainScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'Main'>;\n\nconst EXAMPLE_QUERIES = [\n  'Show me open sales orders',\n  'List inventory items low on stock',\n  'Generate sales report for this month',\n  'Show me a chart of monthly revenue'\n];\n\nconst MainScreen = () => {\n  const navigation = useNavigation<MainScreenNavigationProp>();\n  const dispatch = useAppDispatch();\n  const { token, username, serverUrl } = useAppSelector(state => state.auth);\n  \n  const [isProcessing, setIsProcessing] = useState(false);\n  const [mcpResponse, setMcpResponse] = useState<MCPResponse | null>(null);\n  const [previousQueries, setPreviousQueries] = useState<string[]>([]);\n  const [isMCPConnected, setIsMCPConnected] = useState(false);\n\n  useEffect(() => {\n    const connectToMCP = async () => {\n      if (token && serverUrl) {\n        try {\n          const connected = await mcpService.connect(serverUrl, token);\n          setIsMCPConnected(connected);\n        } catch (err) {\n          console.error('Failed to connect to MCP service', err);\n          Alert.alert('Connection Error', 'Failed to connect to MCP service');\n        }\n      }\n    };\n\n    connectToMCP();\n\n    return () => {\n      mcpService.disconnect();\n    };\n  }, [token, serverUrl]);\n\n  const handleLogout = async () => {\n    try {\n      await mcpService.disconnect();\n      await authService.logout();\n      dispatch(logout());\n      navigation.replace('Login');\n    } catch (err) {\n      console.error('Logout error', err);\n    }\n  };\n\n  const handleSpeechResult = async (text: string) => {\n    processQuery(text);\n  };\n\n  const generateMockResponse = () => {\n    const mockQuery = \"Show me a sample response\";\n    processQuery(mockQuery);\n  };\n\n  const processQuery = async (query: string) => {\n    setIsProcessing(true);\n    \n    try {\n      const response = await mcpService.processQuery(query);\n      setMcpResponse(response);\n      \n      // Add to previous queries, keeping only the last 5\n      setPreviousQueries(prev => [query, ...prev.slice(0, 4)]);\n    } catch (err) {\n      console.error('Error processing query', err);\n      setMcpResponse({\n        type: 'error',\n        content: 'Failed to process your request'\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handlePreviousQueryTap = (query: string) => {\n    processQuery(query);\n  };\n\n  const handleExampleTap = (query: string) => {\n    processQuery(query);\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Appbar.Header>\n        <Appbar.Content title=\"Odoo Voice Assistant\" subtitle={username} />\n        <Appbar.Action icon=\"logout\" onPress={handleLogout} />\n      </Appbar.Header>\n\n      <ScrollView contentContainerStyle={styles.scrollContainer}>\n        <View style={styles.connectionStatus}>\n          <Text>Connection Status: </Text>\n          <Chip \n            icon={isMCPConnected ? \"check-circle\" : \"close-circle\"} \n            mode=\"outlined\" \n            style={[\n              styles.statusChip, \n              isMCPConnected ? styles.connected : styles.disconnected\n            ]}\n          >\n            {isMCPConnected ? 'Connected' : 'Disconnected'}\n          </Chip>\n        </View>\n\n        <MCPResponseRenderer response={mcpResponse} />\n\n        <VoiceInput \n          onSpeechResult={handleSpeechResult}\n          isProcessing={isProcessing}\n        />\n\n        <Button \n          mode=\"contained\" \n          style={styles.mockButton}\n          onPress={generateMockResponse}\n        >\n          Generate Mock Response\n        </Button>\n\n        {previousQueries.length > 0 && (\n          <View style={styles.historyContainer}>\n            <Text style={styles.sectionTitle}>Recent Queries</Text>\n            <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n              {previousQueries.map((query, index) => (\n                <TouchableOpacity\n                  key={index}\n                  onPress={() => handlePreviousQueryTap(query)}\n                  style={styles.historyItem}\n                >\n                  <Text style={styles.historyText} numberOfLines={1}>\n                    {query}\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </ScrollView>\n          </View>\n        )}\n\n        <Divider style={styles.divider} />\n\n        <View style={styles.examplesContainer}>\n          <Text style={styles.sectionTitle}>Try Asking</Text>\n          <View style={styles.examplesGrid}>\n            {EXAMPLE_QUERIES.map((query, index) => (\n              <TouchableOpacity\n                key={index}\n                style={styles.exampleItem}\n                onPress={() => handleExampleTap(query)}\n              >\n                <Text style={styles.exampleText}>{query}</Text>\n              </TouchableOpacity>\n            ))}\n          </View>\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  scrollContainer: {\n    padding: 16,\n  },\n  connectionStatus: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  statusChip: {\n    marginLeft: 8,\n  },\n  connected: {\n    backgroundColor: colors.success + '20',\n  },\n  disconnected: {\n    backgroundColor: colors.error + '20',\n  },\n  mockButton: {\n    marginTop: 10,\n  },\n  historyContainer: {\n    marginTop: 20,\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginBottom: 8,\n    color: colors.text,\n  },\n  historyItem: {\n    backgroundColor: colors.surface,\n    padding: 8,\n    borderRadius: 16,\n    marginRight: 8,\n    marginBottom: 8,\n    maxWidth: 200,\n  },\n  historyText: {\n    fontSize: 14,\n  },\n  divider: {\n    marginVertical: 20,\n  },\n  examplesContainer: {\n    marginBottom: 30,\n  },\n  examplesGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  exampleItem: {\n    backgroundColor: colors.primary + '20',\n    padding: 12,\n    borderRadius: 8,\n    margin: 4,\n    maxWidth: '48%',\n    flexGrow: 1,\n  },\n  exampleText: {\n    fontSize: 14,\n    color: colors.primary,\n  },\n});\n\nexport default MainScreen;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,YAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,KAAA;AAEnD,SAASC,MAAM,EAAEC,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAEC,OAAO,QAAQ,oBAAoB;AACxE,SAASC,aAAa,QAAQ,0BAA0B;AAIxD,SAASC,cAAc;AACvB,SAASC,cAAc;AACvB,SAASC,MAAM;AACf,SAASC,WAAW;AACpB,SAASC,UAAU;AACnB,OAAOC,UAAU;AACjB,OAAOC,mBAAmB;AAC1B,SAASC,MAAM;AAAyB,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAIxC,IAAMC,eAAe,GAAG,CACtB,2BAA2B,EAC3B,mCAAmC,EACnC,sCAAsC,EACtC,oCAAoC,CACrC;AAED,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;EACvB,IAAMC,UAAU,GAAGf,aAAa,CAA2B,CAAC;EAC5D,IAAMgB,QAAQ,GAAGf,cAAc,CAAC,CAAC;EACjC,IAAAgB,eAAA,GAAuCf,cAAc,CAAC,UAAAgB,KAAK;MAAA,OAAIA,KAAK,CAACC,IAAI;IAAA,EAAC;IAAlEC,KAAK,GAAAH,eAAA,CAALG,KAAK;IAAEC,QAAQ,GAAAJ,eAAA,CAARI,QAAQ;IAAEC,SAAS,GAAAL,eAAA,CAATK,SAAS;EAElC,IAAAC,SAAA,GAAwCpC,QAAQ,CAAC,KAAK,CAAC;IAAAqC,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAhDG,YAAY,GAAAF,UAAA;IAAEG,eAAe,GAAAH,UAAA;EACpC,IAAAI,UAAA,GAAsCzC,QAAQ,CAAqB,IAAI,CAAC;IAAA0C,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAjEE,WAAW,GAAAD,UAAA;IAAEE,cAAc,GAAAF,UAAA;EAClC,IAAAG,UAAA,GAA8C7C,QAAQ,CAAW,EAAE,CAAC;IAAA8C,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAA7DE,eAAe,GAAAD,UAAA;IAAEE,kBAAkB,GAAAF,UAAA;EAC1C,IAAAG,UAAA,GAA4CjD,QAAQ,CAAC,KAAK,CAAC;IAAAkD,UAAA,GAAAZ,cAAA,CAAAW,UAAA;IAApDE,cAAc,GAAAD,UAAA;IAAEE,iBAAiB,GAAAF,UAAA;EAExCjD,SAAS,CAAC,YAAM;IACd,IAAMoD,YAAY;MAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;QAC/B,IAAItB,KAAK,IAAIE,SAAS,EAAE;UACtB,IAAI;YACF,IAAMqB,SAAS,SAAStC,UAAU,CAACuC,OAAO,CAACtB,SAAS,EAAEF,KAAK,CAAC;YAC5DmB,iBAAiB,CAACI,SAAS,CAAC;UAC9B,CAAC,CAAC,OAAOE,GAAG,EAAE;YACZC,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEF,GAAG,CAAC;YACtDnD,KAAK,CAACsD,KAAK,CAAC,kBAAkB,EAAE,kCAAkC,CAAC;UACrE;QACF;MACF,CAAC;MAAA,gBAVKR,YAAYA,CAAA;QAAA,OAAAC,IAAA,CAAAQ,KAAA,OAAAC,SAAA;MAAA;IAAA,GAUjB;IAEDV,YAAY,CAAC,CAAC;IAEd,OAAO,YAAM;MACXnC,UAAU,CAAC8C,UAAU,CAAC,CAAC;IACzB,CAAC;EACH,CAAC,EAAE,CAAC/B,KAAK,EAAEE,SAAS,CAAC,CAAC;EAEtB,IAAM8B,YAAY;IAAA,IAAAC,KAAA,GAAAX,iBAAA,CAAG,aAAY;MAC/B,IAAI;QACF,MAAMrC,UAAU,CAAC8C,UAAU,CAAC,CAAC;QAC7B,MAAM/C,WAAW,CAACD,MAAM,CAAC,CAAC;QAC1Ba,QAAQ,CAACb,MAAM,CAAC,CAAC,CAAC;QAClBY,UAAU,CAACuC,OAAO,CAAC,OAAO,CAAC;MAC7B,CAAC,CAAC,OAAOT,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEF,GAAG,CAAC;MACpC;IACF,CAAC;IAAA,gBATKO,YAAYA,CAAA;MAAA,OAAAC,KAAA,CAAAJ,KAAA,OAAAC,SAAA;IAAA;EAAA,GASjB;EAED,IAAMK,kBAAkB;IAAA,IAAAC,KAAA,GAAAd,iBAAA,CAAG,WAAOe,IAAY,EAAK;MACjDC,YAAY,CAACD,IAAI,CAAC;IACpB,CAAC;IAAA,gBAFKF,kBAAkBA,CAAAI,EAAA;MAAA,OAAAH,KAAA,CAAAP,KAAA,OAAAC,SAAA;IAAA;EAAA,GAEvB;EAED,IAAMU,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAA,EAAS;IACjC,IAAMC,SAAS,GAAG,2BAA2B;IAC7CH,YAAY,CAACG,SAAS,CAAC;EACzB,CAAC;EAED,IAAMH,YAAY;IAAA,IAAAI,KAAA,GAAApB,iBAAA,CAAG,WAAOqB,KAAa,EAAK;MAC5CpC,eAAe,CAAC,IAAI,CAAC;MAErB,IAAI;QACF,IAAMqC,QAAQ,SAAS3D,UAAU,CAACqD,YAAY,CAACK,KAAK,CAAC;QACrDhC,cAAc,CAACiC,QAAQ,CAAC;QAGxB7B,kBAAkB,CAAC,UAAA8B,IAAI;UAAA,QAAKF,KAAK,EAAAG,MAAA,CAAAC,kBAAA,CAAKF,IAAI,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;QAAA,CAAC,CAAC;MAC1D,CAAC,CAAC,OAAOvB,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEF,GAAG,CAAC;QAC5Cd,cAAc,CAAC;UACbsC,IAAI,EAAE,OAAO;UACbC,OAAO,EAAE;QACX,CAAC,CAAC;MACJ,CAAC,SAAS;QACR3C,eAAe,CAAC,KAAK,CAAC;MACxB;IACF,CAAC;IAAA,gBAlBK+B,YAAYA,CAAAa,GAAA;MAAA,OAAAT,KAAA,CAAAb,KAAA,OAAAC,SAAA;IAAA;EAAA,GAkBjB;EAED,IAAMsB,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAIT,KAAa,EAAK;IAChDL,YAAY,CAACK,KAAK,CAAC;EACrB,CAAC;EAED,IAAMU,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIV,KAAa,EAAK;IAC1CL,YAAY,CAACK,KAAK,CAAC;EACrB,CAAC;EAED,OACEnD,KAAA,CAACrB,YAAY;IAACmF,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GACpCjE,KAAA,CAACjB,MAAM,CAACmF,MAAM;MAAAD,QAAA,GACZnE,IAAA,CAACf,MAAM,CAACoF,OAAO;QAACC,KAAK,EAAC,sBAAsB;QAACC,QAAQ,EAAE5D;MAAS,CAAE,CAAC,EACnEX,IAAA,CAACf,MAAM,CAACuF,MAAM;QAACC,IAAI,EAAC,QAAQ;QAACC,OAAO,EAAEhC;MAAa,CAAE,CAAC;IAAA,CACzC,CAAC,EAEhBxC,KAAA,CAACpB,UAAU;MAAC6F,qBAAqB,EAAEV,MAAM,CAACW,eAAgB;MAAAT,QAAA,GACxDjE,KAAA,CAACtB,IAAI;QAACoF,KAAK,EAAEC,MAAM,CAACY,gBAAiB;QAAAV,QAAA,GACnCnE,IAAA,CAACb,IAAI;UAAAgF,QAAA,EAAC;QAAmB,CAAM,CAAC,EAChCnE,IAAA,CAACZ,IAAI;UACHqF,IAAI,EAAE7C,cAAc,GAAG,cAAc,GAAG,cAAe;UACvDkD,IAAI,EAAC,UAAU;UACfd,KAAK,EAAE,CACLC,MAAM,CAACc,UAAU,EACjBnD,cAAc,GAAGqC,MAAM,CAAChC,SAAS,GAAGgC,MAAM,CAACe,YAAY,CACvD;UAAAb,QAAA,EAEDvC,cAAc,GAAG,WAAW,GAAG;QAAc,CAC1C,CAAC;MAAA,CACH,CAAC,EAEP5B,IAAA,CAACH,mBAAmB;QAACyD,QAAQ,EAAElC;MAAY,CAAE,CAAC,EAE9CpB,IAAA,CAACJ,UAAU;QACTqF,cAAc,EAAEpC,kBAAmB;QACnC7B,YAAY,EAAEA;MAAa,CAC5B,CAAC,EAEFhB,IAAA,CAACd,MAAM;QACL4F,IAAI,EAAC,WAAW;QAChBd,KAAK,EAAEC,MAAM,CAACiB,UAAW;QACzBR,OAAO,EAAExB,oBAAqB;QAAAiB,QAAA,EAC/B;MAED,CAAQ,CAAC,EAER3C,eAAe,CAAC2D,MAAM,GAAG,CAAC,IACzBjF,KAAA,CAACtB,IAAI;QAACoF,KAAK,EAAEC,MAAM,CAACmB,gBAAiB;QAAAjB,QAAA,GACnCnE,IAAA,CAACb,IAAI;UAAC6E,KAAK,EAAEC,MAAM,CAACoB,YAAa;UAAAlB,QAAA,EAAC;QAAc,CAAM,CAAC,EACvDnE,IAAA,CAAClB,UAAU;UAACwG,UAAU;UAACC,8BAA8B,EAAE,KAAM;UAAApB,QAAA,EAC1D3C,eAAe,CAACgE,GAAG,CAAC,UAACnC,KAAK,EAAEoC,KAAK;YAAA,OAChCzF,IAAA,CAACjB,gBAAgB;cAEf2F,OAAO,EAAE,SAATA,OAAOA,CAAA;gBAAA,OAAQZ,sBAAsB,CAACT,KAAK,CAAC;cAAA,CAAC;cAC7CW,KAAK,EAAEC,MAAM,CAACyB,WAAY;cAAAvB,QAAA,EAE1BnE,IAAA,CAACb,IAAI;gBAAC6E,KAAK,EAAEC,MAAM,CAAC0B,WAAY;gBAACC,aAAa,EAAE,CAAE;gBAAAzB,QAAA,EAC/Cd;cAAK,CACF;YAAC,GANFoC,KAOW,CAAC;UAAA,CACpB;QAAC,CACQ,CAAC;MAAA,CACT,CACP,EAEDzF,IAAA,CAACX,OAAO;QAAC2E,KAAK,EAAEC,MAAM,CAAC4B;MAAQ,CAAE,CAAC,EAElC3F,KAAA,CAACtB,IAAI;QAACoF,KAAK,EAAEC,MAAM,CAAC6B,iBAAkB;QAAA3B,QAAA,GACpCnE,IAAA,CAACb,IAAI;UAAC6E,KAAK,EAAEC,MAAM,CAACoB,YAAa;UAAAlB,QAAA,EAAC;QAAU,CAAM,CAAC,EACnDnE,IAAA,CAACpB,IAAI;UAACoF,KAAK,EAAEC,MAAM,CAAC8B,YAAa;UAAA5B,QAAA,EAC9BhE,eAAe,CAACqF,GAAG,CAAC,UAACnC,KAAK,EAAEoC,KAAK;YAAA,OAChCzF,IAAA,CAACjB,gBAAgB;cAEfiF,KAAK,EAAEC,MAAM,CAAC+B,WAAY;cAC1BtB,OAAO,EAAE,SAATA,OAAOA,CAAA;gBAAA,OAAQX,gBAAgB,CAACV,KAAK,CAAC;cAAA,CAAC;cAAAc,QAAA,EAEvCnE,IAAA,CAACb,IAAI;gBAAC6E,KAAK,EAAEC,MAAM,CAACgC,WAAY;gBAAA9B,QAAA,EAAEd;cAAK,CAAO;YAAC,GAJ1CoC,KAKW,CAAC;UAAA,CACpB;QAAC,CACE,CAAC;MAAA,CACH,CAAC;IAAA,CACG,CAAC;EAAA,CACD,CAAC;AAEnB,CAAC;AAED,IAAMxB,MAAM,GAAGtF,UAAU,CAACuH,MAAM,CAAC;EAC/BhC,SAAS,EAAE;IACTiC,IAAI,EAAE,CAAC;IACPC,eAAe,EAAEtG,MAAM,CAACuG;EAC1B,CAAC;EACDzB,eAAe,EAAE;IACf0B,OAAO,EAAE;EACX,CAAC;EACDzB,gBAAgB,EAAE;IAChB0B,aAAa,EAAE,KAAK;IACpBC,UAAU,EAAE,QAAQ;IACpBC,YAAY,EAAE;EAChB,CAAC;EACD1B,UAAU,EAAE;IACV2B,UAAU,EAAE;EACd,CAAC;EACDzE,SAAS,EAAE;IACTmE,eAAe,EAAEtG,MAAM,CAAC6G,OAAO,GAAG;EACpC,CAAC;EACD3B,YAAY,EAAE;IACZoB,eAAe,EAAEtG,MAAM,CAACuC,KAAK,GAAG;EAClC,CAAC;EACD6C,UAAU,EAAE;IACV0B,SAAS,EAAE;EACb,CAAC;EACDxB,gBAAgB,EAAE;IAChBwB,SAAS,EAAE;EACb,CAAC;EACDvB,YAAY,EAAE;IACZwB,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,MAAM;IAClBL,YAAY,EAAE,CAAC;IACfM,KAAK,EAAEjH,MAAM,CAACiD;EAChB,CAAC;EACD2C,WAAW,EAAE;IACXU,eAAe,EAAEtG,MAAM,CAACkH,OAAO;IAC/BV,OAAO,EAAE,CAAC;IACVW,YAAY,EAAE,EAAE;IAChBC,WAAW,EAAE,CAAC;IACdT,YAAY,EAAE,CAAC;IACfU,QAAQ,EAAE;EACZ,CAAC;EACDxB,WAAW,EAAE;IACXkB,QAAQ,EAAE;EACZ,CAAC;EACDhB,OAAO,EAAE;IACPuB,cAAc,EAAE;EAClB,CAAC;EACDtB,iBAAiB,EAAE;IACjBW,YAAY,EAAE;EAChB,CAAC;EACDV,YAAY,EAAE;IACZQ,aAAa,EAAE,KAAK;IACpBc,QAAQ,EAAE;EACZ,CAAC;EACDrB,WAAW,EAAE;IACXI,eAAe,EAAEtG,MAAM,CAACwH,OAAO,GAAG,IAAI;IACtChB,OAAO,EAAE,EAAE;IACXW,YAAY,EAAE,CAAC;IACfM,MAAM,EAAE,CAAC;IACTJ,QAAQ,EAAE,KAAK;IACfK,QAAQ,EAAE;EACZ,CAAC;EACDvB,WAAW,EAAE;IACXY,QAAQ,EAAE,EAAE;IACZE,KAAK,EAAEjH,MAAM,CAACwH;EAChB;AACF,CAAC,CAAC;AAEF,eAAelH,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}