{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nexport var MCPService = function () {\n  function MCPService() {\n    _classCallCheck(this, MCPService);\n    this.isConnected = false;\n    this.serverUrl = null;\n    this.token = null;\n  }\n  return _createClass(MCPService, [{\n    key: \"connect\",\n    value: function connect(serverUrl, token) {\n      var _this = this;\n      return new Promise(function (resolve) {\n        setTimeout(function () {\n          _this.isConnected = true;\n          _this.serverUrl = serverUrl;\n          _this.token = token;\n          console.log(`[MCP] Connected to ${serverUrl}`);\n          resolve(true);\n        }, 500);\n      });\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var _this2 = this;\n      return new Promise(function (resolve) {\n        setTimeout(function () {\n          _this2.isConnected = false;\n          _this2.serverUrl = null;\n          _this2.token = null;\n          console.log('[MCP] Disconnected');\n          resolve();\n        }, 200);\n      });\n    }\n  }, {\n    key: \"processQuery\",\n    value: function () {\n      var _processQuery = _asyncToGenerator(function* (query) {\n        if (!this.isConnected) {\n          return {\n            type: 'error',\n            content: 'Not connected to MCP service'\n          };\n        }\n        yield new Promise(function (resolve) {\n          return setTimeout(resolve, 1000);\n        });\n        if (query.toLowerCase().includes('hello') || query.toLowerCase().includes('hi')) {\n          return {\n            type: 'text',\n            content: 'Hello! How can I assist you with Odoo today?'\n          };\n        } else if (query.toLowerCase().includes('list') || query.toLowerCase().includes('show me')) {\n          return {\n            type: 'list',\n            content: {\n              title: 'Sample List',\n              items: ['Sales Orders: 24 open orders', 'Invoices: 12 to approve', 'Inventory: 5 products low on stock', 'CRM: 8 opportunities to follow up']\n            }\n          };\n        } else if (query.toLowerCase().includes('report') || query.toLowerCase().includes('numbers')) {\n          return {\n            type: 'table',\n            content: {\n              headers: ['Product', 'Quantity', 'Value'],\n              rows: [['Laptop Pro', '125', '$187,500'], ['Smartphone X', '310', '$155,000'], ['Tablet Mini', '89', '$26,700'], ['Accessories', '450', '$13,500']]\n            }\n          };\n        } else if (query.toLowerCase().includes('chart') || query.toLowerCase().includes('graph')) {\n          return {\n            type: 'image',\n            content: 'https://via.placeholder.com/300x200?text=Sample+Chart'\n          };\n        } else {\n          return {\n            type: 'text',\n            content: `I processed your query: \"${query}\". How can I help you further?`\n          };\n        }\n      });\n      function processQuery(_x) {\n        return _processQuery.apply(this, arguments);\n      }\n      return processQuery;\n    }()\n  }]);\n}();\nexport var mcpService = new MCPService();","map":{"version":3,"names":["MCPService","_classCallCheck","isConnected","serverUrl","token","_createClass","key","value","connect","_this","Promise","resolve","setTimeout","console","log","disconnect","_this2","_processQuery","_asyncToGenerator","query","type","content","toLowerCase","includes","title","items","headers","rows","processQuery","_x","apply","arguments","mcpService"],"sources":["/var/www/html/odoo-react-native/src/api/mcpService.ts"],"sourcesContent":["// Mock implementation of the Model Context Protocol SDK\n\nexport interface MCPResponse {\n  type: 'text' | 'image' | 'list' | 'table' | 'error';\n  content: any;\n}\n\nexport class MCPService {\n  private isConnected: boolean = false;\n  private serverUrl: string | null = null;\n  private token: string | null = null;\n\n  connect(serverUrl: string, token: string): Promise<boolean> {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        this.isConnected = true;\n        this.serverUrl = serverUrl;\n        this.token = token;\n        console.log(`[MCP] Connected to ${serverUrl}`);\n        resolve(true);\n      }, 500);\n    });\n  }\n\n  disconnect(): Promise<void> {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        this.isConnected = false;\n        this.serverUrl = null;\n        this.token = null;\n        console.log('[MCP] Disconnected');\n        resolve();\n      }, 200);\n    });\n  }\n\n  async processQuery(query: string): Promise<MCPResponse> {\n    if (!this.isConnected) {\n      return {\n        type: 'error',\n        content: 'Not connected to MCP service'\n      };\n    }\n\n    // Simulate processing delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // For demo purposes, generate different response types based on the query\n    if (query.toLowerCase().includes('hello') || query.toLowerCase().includes('hi')) {\n      return {\n        type: 'text',\n        content: 'Hello! How can I assist you with Odoo today?'\n      };\n    } else if (query.toLowerCase().includes('list') || query.toLowerCase().includes('show me')) {\n      return {\n        type: 'list',\n        content: {\n          title: 'Sample List',\n          items: [\n            'Sales Orders: 24 open orders',\n            'Invoices: 12 to approve',\n            'Inventory: 5 products low on stock',\n            'CRM: 8 opportunities to follow up'\n          ]\n        }\n      };\n    } else if (query.toLowerCase().includes('report') || query.toLowerCase().includes('numbers')) {\n      return {\n        type: 'table',\n        content: {\n          headers: ['Product', 'Quantity', 'Value'],\n          rows: [\n            ['Laptop Pro', '125', '$187,500'],\n            ['Smartphone X', '310', '$155,000'],\n            ['Tablet Mini', '89', '$26,700'],\n            ['Accessories', '450', '$13,500']\n          ]\n        }\n      };\n    } else if (query.toLowerCase().includes('chart') || query.toLowerCase().includes('graph')) {\n      return {\n        type: 'image',\n        content: 'https://via.placeholder.com/300x200?text=Sample+Chart'\n      };\n    } else {\n      return {\n        type: 'text',\n        content: `I processed your query: \"${query}\". How can I help you further?`\n      };\n    }\n  }\n}\n\n// Export a singleton instance\nexport const mcpService = new MCPService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}